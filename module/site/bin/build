#!/usr/bin/env bash

set -euo pipefail

SCRIPT_DIR_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r SCRIPT_DIR_PATH
#SCRIPT_FILE_NAME="$(basename "$0")"
#declare -r SCRIPT_FILE_NAME
#declare -r SCRIPT_FILE_PATH="$SCRIPT_DIR_PATH"/"$SCRIPT_FILE_NAME"
THIS_MODULE_DIR_PATH="$(realpath -e "$SCRIPT_DIR_PATH"/..)"
declare -r THIS_MODULE_DIR_PATH
declare -r FRONTEND_DIR_PATH="$THIS_MODULE_DIR_PATH"/module/localhost/ui/frontend
#WWW_USER=$(id -u)
#WWW_GROUP=$(id -g)
#declare -r WWW_USER WWW_GROUP
declare -r WWW_USER=www-data
declare -r WWW_GROUP="$WWW_USER"
declare -r TEST_DB_USER=root
declare -r TEST_DB_PASSWORD=root
declare -r TEST_DB_NAME=test

err() {
    echo "$@" 1>&2
    exit 1
}

show_facts() {
#    env
    pwd
    ls -alh "$THIS_MODULE_DIR_PATH"
    id
    cat /etc/os-release
    #which -a php
    php --version
    composer --version
}

configure_nginx() {
    sudo apt install -y nginx
    webRootDirPath="$FRONTEND_DIR_PATH" php "$THIS_MODULE_DIR_PATH"/rc/nginx.conf.php | sudo tee /etc/nginx/sites-enabled/default
    sudo nginx -t
    mkdir -p "$THIS_MODULE_DIR_PATH"/module/localhost/{log,tmp/cache}
    sudo chown -R "$WWW_USER":"$WWW_GROUP" "$FRONTEND_DIR_PATH" "$THIS_MODULE_DIR_PATH"/module/localhost/{log,tmp/cache}
    sudo systemctl restart nginx
}

configure_xserver() {
    echo Starting X server...
    if ! pidof Xvfb &> /dev/null; then
        # To running firefox, see https://docs.travis-ci.com/user/gui-and-headless-browsers/
        export DISPLAY=:99
        mkdir -p "$THIS_MODULE_DIR_PATH"/tmp
        # `start-stop-daemon` is provided by the `dpkg` package
        /sbin/start-stop-daemon --start --quiet --pidfile "$THIS_MODULE_DIR_PATH"/tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16 || err "Unable to start xserver"
    fi
}

install_npm_packages() {
    echo Installing global NPM packages...
    sudo npm install -g npm
    sudo npm install -g typescript@next sass rollup # yarn
    # todo: postcss autoprefixer
    # todo Install deno using package manager

    echo Installing local NPM packages...
    declare -r find_args=(
        -name package.json
        -type f
        -not -path '*/node_modules/*'
        -print0
    )
    declare path
    while IFS= read -r -d '' path; do
        pushd "$(dirname "$path")" > /dev/null
        #test -e package.json || echo '{}' > package.json
        echo "Installing packages in '$(dirname "$path")'..."
        npm update # runs scripts in package.json
        popd > /dev/null # $(dirname "$path")
    done < <(echo -en "$THIS_MODULE_DIR_PATH/package.json\x00"; echo -en "$FRONTEND_DIR_PATH/package.json\x00"; find "$FRONTEND_DIR_PATH"/module "${find_args[@]}")
    #while IFS= read -r -d '' path; do
    #    pushd "$(dirname "$path")" > /dev/null
    #    npm install
    #    popd > /dev/null
    #done < <(find . -name node_modules -type d -print0)
}

configure_db_server() {
    sudo systemctl restart mysql
    mysql -u"$TEST_DB_USER" -p"$TEST_DB_PASSWORD" -e "DROP DATABASE IF EXISTS $TEST_DB_NAME; CREATE DATABASE $TEST_DB_NAME DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci"
    mysql -u"$TEST_DB_USER" -p"$TEST_DB_PASSWORD" -e "SHOW DATABASES"
}

configure_block_dev() {
    echo Configuring block device for tests...
    declare block_dev_path=/tmp/block-dev-test
    if ! test -b "$block_dev_path"; then
        sudo mknod -m 0777 "$block_dev_path" b 125 1
    fi
    if ! test -r "$block_dev_path"; then
        sudo chown "$(id -u)":"$(id -g)" "$block_dev_path"
    fi
}

configure_env() {
    sudo apt update
    configure_block_dev
    configure_xserver
    install_npm_packages
    configure_nginx
    composer --ignore-platform-reqs --no-ansi --no-interaction install
    configure_db_server
}

build_package() {
    :
}

show_facts
configure_env
build_package