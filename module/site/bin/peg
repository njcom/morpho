#!/usr/bin/env php
<?php declare(strict_types=1);
namespace Morpho\App\Cli;

require __DIR__ . '/../vendor/autoload.php';
bootstrap();

use RuntimeException;

use UnexpectedValueException;

use function Morpho\Base\symDiff;

use const Morpho\Base\INDENT;

/*function tokenize($stream): void {
    foreach (PythonTokenizer::tokenize($stream) as $token) {
        showLine($token);
    }
}*/

/**
 * @param array    $argv
 * @param callable $fread Callable[[Resource], None], e.g. processStdinOrArgs(array_slice($_SERVER['argv'], 1), function ($stream) { stream_get_contents($stream, offset: 0); });
 * @return void
 */
function processStdinOrArgs(array $argv, callable $fread): void {
    if (count($argv) < 1) {
        $fread(STDIN);
    } else {
        foreach ($argv as $arg) {
            if ($arg == '-') {
                // `-` means read from stdin
                $fread(STDIN);
            } else {
                // List of files as arguments
                $stream = fopen($arg, 'r');
                $fread($stream);
                fclose($stream);
            }
        }
    }
}

// ----------------------------------------------------------------------------
// Commands

function genPyTokens(array $argv): void {
    processStdinOrArgs($argv, function ($stream) {
        $descriptors = [
            0 => ["pipe", "r"],  // stdin is a pipe that the child will read from
            1 => ["pipe", "w"],
            2 => STDERR,
            //1 => ["pipe", "w"],  // stdout is a pipe that the child will write to
            //2 => ["pipe", "w"], // stderr
        ];
        $process = proc_open("python -c 'import tokenize, sys\nfor token in tokenize.generate_tokens(sys.stdin.readline): print(token)'", $descriptors, $pipes);
        if (!$process) {
            throw new RuntimeException();
        }
        fwrite($pipes[0], stream_get_contents($stream, offset: 0)); // input file
        fclose($pipes[0]);

        //$stream = fopen('php://memory', 'r+');
        $output = stream_get_contents($pipes[1]);
        echo preg_replace('~^TokenInfo\\(~m', 'Token(', $output);
        fclose($pipes[1]);

        $exitCode = proc_close($process);
        if ($exitCode) {
            throw new RuntimeException();
        }
    });
}

function genTokenType(): void {
    $tokens = [];
    $ignored = [];
    foreach (explode(', ', trim(sh('python -c "import token; print(token.tok_name)"', ['capture' => true])->stdOut(), " }{\n")) as $tokenOutput) {
        [$val, $name] = explode(': ', $tokenOutput);
        $name = trim($name, '"\'');
        if (in_array($name, $ignored)) {
            continue;
        }
        $tokens[$name] = $val;
    }
    $cases = [
        "AMPER" => "Ampersand",
        "AMPEREQUAL" => "AmpersandEqual",
        "ASYNC" => "Async",
        "AT" => "At",
        "ATEQUAL" => "AtEqual",
        "AWAIT" => "Await",
        "CIRCUMFLEX" => "Circumflex",
        "CIRCUMFLEXEQUAL" => "CircumflexEqual",
        "COLON" => "Colon",
        "COLONEQUAL" => "ColonEqual",
        "COMMA" => "Comma",
        "COMMENT" => "Comment",
        "DEDENT" => "Dedent",
        "DOT" => "Dot",
        "DOUBLESLASH" => "DoubleSlash",
        "DOUBLESLASHEQUAL" => "DoubleSlashEqual",
        "DOUBLESTAR" => "DoubleStar",
        "DOUBLESTAREQUAL" => "DoubleStarEqual",
        "ELLIPSIS" => "Ellipsis",
        "ENCODING" => "Encoding",
        "ENDMARKER" => "EndMarker",
        "EQUAL" => "Equal",
        "EQEQUAL" => "EqualEqual",
        "ERRORTOKEN" => "ErrorToken",
        "EXCLAMATION" => "Exclamation",
        "FSTRING_END" => "FstringEnd",
        "FSTRING_MIDDLE" => "FstringMiddle",
        "FSTRING_START" => "FStringStart",
        "GREATER" => "Greater",
        "GREATEREQUAL" => "GreaterEqual",
        "INDENT" => "Indent",
        "LBRACE" => "LeftBrace",
        "LPAR" => "LeftParen",
        "LEFTSHIFT" => "LeftShift",
        "LEFTSHIFTEQUAL" => "LeftShiftEqual",
        "LSQB" => "LeftSquareBrace",
        "LESS" => "Less",
        "LESSEQUAL" => "LessEqual",
        "MINUS" => "Minus",
        "MINEQUAL" => "MinusEqual",
        "NL" => "NL",
        "N_TOKENS" => "NTokens",
        "NAME" => "Name",
        "NEWLINE" => "NewLine",
        "NOTEQUAL" => "NotEqual",
        "NT_OFFSET" => "NtOffset",
        "NUMBER" => "Number",
        "OP" => "Op",
        "PERCENT" => "Percent",
        "PERCENTEQUAL" => "PercentEqual",
        "PLUS" => "Plus",
        "PLUSEQUAL" => "PlusEqual",
        "RARROW" => "RightArrow",
        "RBRACE" => "RightBrace",
        "RPAR" => "RightParen",
        "RIGHTSHIFT" => "RightShift",
        "RIGHTSHIFTEQUAL" => "RightShiftEqual",
        "RSQB" => "RightSquareBrace",
        "SEMI" => "Semicolon",
        "SLASH" => "Slash",
        "SLASHEQUAL" => "SlashEqual",
        "SOFT_KEYWORD" => "SoftKeyword",
        "STAR" => "Star",
        "STAREQUAL" => "StarEqual",
        "STRING" => "String",
        "TILDE" => "Tilde",
        "TYPE_COMMENT" => "TypeComment",
        "TYPE_IGNORE" => "TypeIgnore",
        "VBAR" => "VertBar",
        "VBAREQUAL" => "VertBarEqual",
    ];

    $tokens1 = $tokens;
    ksort($tokens1);
    $diff = symDiff(array_keys($cases), array_keys($tokens1));
    if ($diff) {
        throw new UnexpectedValueException(print_r($diff, true));
    }

    $out = rtrim(
            '<?php declare(strict_types=1);' . "\n" . <<<'OUT'
    /**
     * This file is part of njcom/framework
     * It is distributed under the 'Apache License Version 2.0' license.
     * See the https://github.com/njcom/framework/blob/main/LICENSE for the full license text.
     */
    // This file was generated by the bin/peg script. 
    namespace Morpho\Compiler\Frontend\Peg;
    
    /**
     * https://github.com/python/cpython/blob/3.12/Lib/token.py
     */
    enum TokenType: int {
    OUT
        ) . "\n";
    $exactTypes = [];
    foreach ($tokens as $name => $value) {
        $out .= INDENT . 'case ' . $cases[$name] . ' = ' . $value . ";\n";
        $exactTypes[$value] = $cases[$name];
    }
    echo $out . "}\n";

    $out = rtrim(<<<OUT
        /**
         * EXACT_TOKEN_TYPES in Python
         */
        private static function exactTypes(): array {
            return [
    OUT
        ) . "\n";
    echo "---\n";
    foreach (explode(', ', trim(sh('python -c "from token import EXACT_TOKEN_TYPES; print(EXACT_TOKEN_TYPES)"', ['capture' => true])->stdOut(), " }{\n")) as $tokenOutput) {
        $pos = strrpos($tokenOutput, ': ');
        if (false === $pos) {
            throw new UnexpectedValueException($tokenOutput);
        }
        $token = trim(substr($tokenOutput, 0, $pos), '"\'');
        $value = substr($tokenOutput, $pos + 2);
        $out .= str_repeat(INDENT, 3) . var_export($token, true) . ' => self::' . $exactTypes[$value] . ",\n";
    }
    $out .= rtrim(
            <<<OUT
            ];
        }
    OUT) . "\n";
    echo $out;
}

function usage(bool $error) {
    $msg = "Usage: " . $_SERVER['argv'][0] . ' (gen-py-tokens | gen-token-type | usage)';
    if ($error) {
        errorLine($msg);
    } else {
        showLine($msg);
        exit();
    }
}

/*function dumpAst() {
    // @todo: https://github.com/python/cpython/blob/3.12/Tools/peg_generator/pegen/ast_dump.py
    throw new NotImplementedException();
}*/

switch ($argv[1] ?? null) {
    case 'gen-py-tokens':
        genPyTokens(array_slice($argv, 2));
        break;

    case 'gen-token-type':
        genTokenType();
        break;

    case 'usage':
        usage(false);
        break;

    default:
        showErrorLine("Unknown command");
        usage(true);
        break;
}
