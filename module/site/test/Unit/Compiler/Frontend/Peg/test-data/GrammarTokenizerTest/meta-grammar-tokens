Token(type=55 (Op), value='@', start=(1, 0), end=(1, 1), line='@subheader """\\\n')
Token(type=1 (Name), value='subheader', start=(1, 1), end=(1, 10), line='@subheader """\\\n')
Token(type=3 (String), value='"""\\\nfrom ast import literal_eval\n\nfrom pegen.grammar import (\n    Alt,\n    Cut,\n    Forced,\n    Gather,\n    Group,\n    Item,\n    Lookahead,\n    LookaheadOrCut,\n    MetaTuple,\n    MetaList,\n    NameLeaf,\n    NamedItem,\n    NamedItemList,\n    NegativeLookahead,\n    Opt,\n    Plain,\n    PositiveLookahead,\n    Repeat0,\n    Repeat1,\n    Rhs,\n    Rule,\n    RuleList,\n    RuleName,\n    Grammar,\n    StringLeaf,\n)\n"""', start=(1, 11), end=(31, 3), line='@subheader """\\\nfrom ast import literal_eval\n\nfrom pegen.grammar import (\n    Alt,\n    Cut,\n    Forced,\n    Gather,\n    Group,\n    Item,\n    Lookahead,\n    LookaheadOrCut,\n    MetaTuple,\n    MetaList,\n    NameLeaf,\n    NamedItem,\n    NamedItemList,\n    NegativeLookahead,\n    Opt,\n    Plain,\n    PositiveLookahead,\n    Repeat0,\n    Repeat1,\n    Rhs,\n    Rule,\n    RuleList,\n    RuleName,\n    Grammar,\n    StringLeaf,\n)\n"""\n')
Token(type=4 (NewLine), value='\n', start=(31, 3), end=(31, 4), line='"""\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(32, 0), end=(32, 1), line='\n')
Token(type=1 (Name), value='start', start=(33, 0), end=(33, 5), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=55 (Op), value='[', start=(33, 5), end=(33, 6), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=1 (Name), value='Grammar', start=(33, 6), end=(33, 13), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=55 (Op), value=']', start=(33, 13), end=(33, 14), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=55 (Op), value=':', start=(33, 14), end=(33, 15), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=1 (Name), value='grammar', start=(33, 16), end=(33, 23), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=1 (Name), value='EndMarker', start=(33, 24), end=(33, 33), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=55 (Op), value='{', start=(33, 34), end=(33, 35), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=255 (GrammarAction), value=' grammar ', start=(33, 35), end=(33, 44), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=55 (Op), value='}', start=(33, 44), end=(33, 45), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=4 (NewLine), value='\n', start=(33, 45), end=(33, 46), line='start[Grammar]: grammar EndMarker { grammar }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(34, 0), end=(34, 1), line='\n')
Token(type=1 (Name), value='grammar', start=(35, 0), end=(35, 7), line='grammar[Grammar]:\n')
Token(type=55 (Op), value='[', start=(35, 7), end=(35, 8), line='grammar[Grammar]:\n')
Token(type=1 (Name), value='Grammar', start=(35, 8), end=(35, 15), line='grammar[Grammar]:\n')
Token(type=55 (Op), value=']', start=(35, 15), end=(35, 16), line='grammar[Grammar]:\n')
Token(type=55 (Op), value=':', start=(35, 16), end=(35, 17), line='grammar[Grammar]:\n')
Token(type=4 (NewLine), value='\n', start=(35, 17), end=(35, 18), line='grammar[Grammar]:\n')
Token(type=5 (Indent), value='    ', start=(36, 0), end=(36, 4), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=55 (Op), value='|', start=(36, 4), end=(36, 5), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=1 (Name), value='metas', start=(36, 6), end=(36, 11), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=1 (Name), value='rules', start=(36, 12), end=(36, 17), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=55 (Op), value='{', start=(36, 18), end=(36, 19), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=255 (GrammarAction), value=' Grammar(rules, metas) ', start=(36, 19), end=(36, 42), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=55 (Op), value='}', start=(36, 42), end=(36, 43), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=4 (NewLine), value='\n', start=(36, 43), end=(36, 44), line='    | metas rules { Grammar(rules, metas) }\n')
Token(type=55 (Op), value='|', start=(37, 4), end=(37, 5), line='    | rules { Grammar(rules, []) }\n')
Token(type=1 (Name), value='rules', start=(37, 6), end=(37, 11), line='    | rules { Grammar(rules, []) }\n')
Token(type=55 (Op), value='{', start=(37, 12), end=(37, 13), line='    | rules { Grammar(rules, []) }\n')
Token(type=255 (GrammarAction), value=' Grammar(rules, []) ', start=(37, 13), end=(37, 33), line='    | rules { Grammar(rules, []) }\n')
Token(type=55 (Op), value='}', start=(37, 33), end=(37, 34), line='    | rules { Grammar(rules, []) }\n')
Token(type=4 (NewLine), value='\n', start=(37, 34), end=(37, 35), line='    | rules { Grammar(rules, []) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(38, 0), end=(38, 1), line='\n')
Token(type=6 (Dedent), value='', start=(39, 0), end=(39, 0), line='metas[MetaList]:\n')
Token(type=1 (Name), value='metas', start=(39, 0), end=(39, 5), line='metas[MetaList]:\n')
Token(type=55 (Op), value='[', start=(39, 5), end=(39, 6), line='metas[MetaList]:\n')
Token(type=1 (Name), value='MetaList', start=(39, 6), end=(39, 14), line='metas[MetaList]:\n')
Token(type=55 (Op), value=']', start=(39, 14), end=(39, 15), line='metas[MetaList]:\n')
Token(type=55 (Op), value=':', start=(39, 15), end=(39, 16), line='metas[MetaList]:\n')
Token(type=4 (NewLine), value='\n', start=(39, 16), end=(39, 17), line='metas[MetaList]:\n')
Token(type=5 (Indent), value='    ', start=(40, 0), end=(40, 4), line='    | meta metas { [meta] + metas }\n')
Token(type=55 (Op), value='|', start=(40, 4), end=(40, 5), line='    | meta metas { [meta] + metas }\n')
Token(type=1 (Name), value='meta', start=(40, 6), end=(40, 10), line='    | meta metas { [meta] + metas }\n')
Token(type=1 (Name), value='metas', start=(40, 11), end=(40, 16), line='    | meta metas { [meta] + metas }\n')
Token(type=55 (Op), value='{', start=(40, 17), end=(40, 18), line='    | meta metas { [meta] + metas }\n')
Token(type=255 (GrammarAction), value=' [meta] + metas ', start=(40, 18), end=(40, 34), line='    | meta metas { [meta] + metas }\n')
Token(type=55 (Op), value='}', start=(40, 34), end=(40, 35), line='    | meta metas { [meta] + metas }\n')
Token(type=4 (NewLine), value='\n', start=(40, 35), end=(40, 36), line='    | meta metas { [meta] + metas }\n')
Token(type=55 (Op), value='|', start=(41, 4), end=(41, 5), line='    | meta { [meta] }\n')
Token(type=1 (Name), value='meta', start=(41, 6), end=(41, 10), line='    | meta { [meta] }\n')
Token(type=55 (Op), value='{', start=(41, 11), end=(41, 12), line='    | meta { [meta] }\n')
Token(type=255 (GrammarAction), value=' [meta] ', start=(41, 12), end=(41, 20), line='    | meta { [meta] }\n')
Token(type=55 (Op), value='}', start=(41, 20), end=(41, 21), line='    | meta { [meta] }\n')
Token(type=4 (NewLine), value='\n', start=(41, 21), end=(41, 22), line='    | meta { [meta] }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(42, 0), end=(42, 1), line='\n')
Token(type=6 (Dedent), value='', start=(43, 0), end=(43, 0), line='meta[MetaTuple]:\n')
Token(type=1 (Name), value='meta', start=(43, 0), end=(43, 4), line='meta[MetaTuple]:\n')
Token(type=55 (Op), value='[', start=(43, 4), end=(43, 5), line='meta[MetaTuple]:\n')
Token(type=1 (Name), value='MetaTuple', start=(43, 5), end=(43, 14), line='meta[MetaTuple]:\n')
Token(type=55 (Op), value=']', start=(43, 14), end=(43, 15), line='meta[MetaTuple]:\n')
Token(type=55 (Op), value=':', start=(43, 15), end=(43, 16), line='meta[MetaTuple]:\n')
Token(type=4 (NewLine), value='\n', start=(43, 16), end=(43, 17), line='meta[MetaTuple]:\n')
Token(type=5 (Indent), value='    ', start=(44, 0), end=(44, 4), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=55 (Op), value='|', start=(44, 4), end=(44, 5), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=3 (String), value='"@"', start=(44, 6), end=(44, 9), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=1 (Name), value='Name', start=(44, 10), end=(44, 14), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=1 (Name), value='NewLine', start=(44, 15), end=(44, 22), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=55 (Op), value='{', start=(44, 23), end=(44, 24), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=255 (GrammarAction), value=' (name.string, None) ', start=(44, 24), end=(44, 45), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=55 (Op), value='}', start=(44, 45), end=(44, 46), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=4 (NewLine), value='\n', start=(44, 46), end=(44, 47), line='    | "@" Name NewLine { (name.string, None) }\n')
Token(type=55 (Op), value='|', start=(45, 4), end=(45, 5), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=3 (String), value='"@"', start=(45, 6), end=(45, 9), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=1 (Name), value='a', start=(45, 10), end=(45, 11), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=55 (Op), value='=', start=(45, 11), end=(45, 12), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=1 (Name), value='Name', start=(45, 12), end=(45, 16), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=1 (Name), value='b', start=(45, 17), end=(45, 18), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=55 (Op), value='=', start=(45, 18), end=(45, 19), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=1 (Name), value='Name', start=(45, 19), end=(45, 23), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=1 (Name), value='NewLine', start=(45, 24), end=(45, 31), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=55 (Op), value='{', start=(45, 32), end=(45, 33), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=255 (GrammarAction), value=' (a.string, b.string) ', start=(45, 33), end=(45, 55), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=55 (Op), value='}', start=(45, 55), end=(45, 56), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=4 (NewLine), value='\n', start=(45, 56), end=(45, 57), line='    | "@" a=Name b=Name NewLine { (a.string, b.string) }\n')
Token(type=55 (Op), value='|', start=(46, 4), end=(46, 5), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=3 (String), value='"@"', start=(46, 6), end=(46, 9), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=1 (Name), value='Name', start=(46, 10), end=(46, 14), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=1 (Name), value='String', start=(46, 15), end=(46, 21), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=1 (Name), value='NewLine', start=(46, 22), end=(46, 29), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=55 (Op), value='{', start=(46, 30), end=(46, 31), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=255 (GrammarAction), value=' (name.string, literal_eval(string.string)) ', start=(46, 31), end=(46, 75), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=55 (Op), value='}', start=(46, 75), end=(46, 76), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=4 (NewLine), value='\n', start=(46, 76), end=(46, 77), line='    | "@" Name String NewLine { (name.string, literal_eval(string.string)) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(47, 0), end=(47, 1), line='\n')
Token(type=6 (Dedent), value='', start=(48, 0), end=(48, 0), line='rules[RuleList]:\n')
Token(type=1 (Name), value='rules', start=(48, 0), end=(48, 5), line='rules[RuleList]:\n')
Token(type=55 (Op), value='[', start=(48, 5), end=(48, 6), line='rules[RuleList]:\n')
Token(type=1 (Name), value='RuleList', start=(48, 6), end=(48, 14), line='rules[RuleList]:\n')
Token(type=55 (Op), value=']', start=(48, 14), end=(48, 15), line='rules[RuleList]:\n')
Token(type=55 (Op), value=':', start=(48, 15), end=(48, 16), line='rules[RuleList]:\n')
Token(type=4 (NewLine), value='\n', start=(48, 16), end=(48, 17), line='rules[RuleList]:\n')
Token(type=5 (Indent), value='    ', start=(49, 0), end=(49, 4), line='    | rule rules { [rule] + rules }\n')
Token(type=55 (Op), value='|', start=(49, 4), end=(49, 5), line='    | rule rules { [rule] + rules }\n')
Token(type=1 (Name), value='rule', start=(49, 6), end=(49, 10), line='    | rule rules { [rule] + rules }\n')
Token(type=1 (Name), value='rules', start=(49, 11), end=(49, 16), line='    | rule rules { [rule] + rules }\n')
Token(type=55 (Op), value='{', start=(49, 17), end=(49, 18), line='    | rule rules { [rule] + rules }\n')
Token(type=255 (GrammarAction), value=' [rule] + rules ', start=(49, 18), end=(49, 34), line='    | rule rules { [rule] + rules }\n')
Token(type=55 (Op), value='}', start=(49, 34), end=(49, 35), line='    | rule rules { [rule] + rules }\n')
Token(type=4 (NewLine), value='\n', start=(49, 35), end=(49, 36), line='    | rule rules { [rule] + rules }\n')
Token(type=55 (Op), value='|', start=(50, 4), end=(50, 5), line='    | rule { [rule] }\n')
Token(type=1 (Name), value='rule', start=(50, 6), end=(50, 10), line='    | rule { [rule] }\n')
Token(type=55 (Op), value='{', start=(50, 11), end=(50, 12), line='    | rule { [rule] }\n')
Token(type=255 (GrammarAction), value=' [rule] ', start=(50, 12), end=(50, 20), line='    | rule { [rule] }\n')
Token(type=55 (Op), value='}', start=(50, 20), end=(50, 21), line='    | rule { [rule] }\n')
Token(type=4 (NewLine), value='\n', start=(50, 21), end=(50, 22), line='    | rule { [rule] }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(51, 0), end=(51, 1), line='\n')
Token(type=6 (Dedent), value='', start=(52, 0), end=(52, 0), line='rule[Rule]:\n')
Token(type=1 (Name), value='rule', start=(52, 0), end=(52, 4), line='rule[Rule]:\n')
Token(type=55 (Op), value='[', start=(52, 4), end=(52, 5), line='rule[Rule]:\n')
Token(type=1 (Name), value='Rule', start=(52, 5), end=(52, 9), line='rule[Rule]:\n')
Token(type=55 (Op), value=']', start=(52, 9), end=(52, 10), line='rule[Rule]:\n')
Token(type=55 (Op), value=':', start=(52, 10), end=(52, 11), line='rule[Rule]:\n')
Token(type=4 (NewLine), value='\n', start=(52, 11), end=(52, 12), line='rule[Rule]:\n')
Token(type=5 (Indent), value='    ', start=(53, 0), end=(53, 4), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=55 (Op), value='|', start=(53, 4), end=(53, 5), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='rulename', start=(53, 6), end=(53, 14), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='memoflag', start=(53, 15), end=(53, 23), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=55 (Op), value='?', start=(53, 23), end=(53, 24), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=3 (String), value='":"', start=(53, 25), end=(53, 28), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='alts', start=(53, 29), end=(53, 33), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='NewLine', start=(53, 34), end=(53, 41), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='Indent', start=(53, 42), end=(53, 48), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='more_alts', start=(53, 49), end=(53, 58), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='Dedent', start=(53, 59), end=(53, 65), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=55 (Op), value='{', start=(53, 66), end=(53, 67), line='    | rulename memoflag? ":" alts NewLine Indent more_alts Dedent {\n')
Token(type=255 (GrammarAction), value='\n          Rule(rulename[0], rulename[1], Rhs(alts.alts + more_alts.alts), memo=opt) ', start=(53, 67), end=(54, 84), line='          Rule(rulename[0], rulename[1], Rhs(alts.alts + more_alts.alts), memo=opt) }\n')
Token(type=55 (Op), value='}', start=(54, 84), end=(54, 85), line='          Rule(rulename[0], rulename[1], Rhs(alts.alts + more_alts.alts), memo=opt) }\n')
Token(type=4 (NewLine), value='\n', start=(54, 85), end=(54, 86), line='          Rule(rulename[0], rulename[1], Rhs(alts.alts + more_alts.alts), memo=opt) }\n')
Token(type=55 (Op), value='|', start=(55, 4), end=(55, 5), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='rulename', start=(55, 6), end=(55, 14), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='memoflag', start=(55, 15), end=(55, 23), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=55 (Op), value='?', start=(55, 23), end=(55, 24), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=3 (String), value='":"', start=(55, 25), end=(55, 28), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='NewLine', start=(55, 29), end=(55, 36), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='Indent', start=(55, 37), end=(55, 43), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='more_alts', start=(55, 44), end=(55, 53), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=1 (Name), value='Dedent', start=(55, 54), end=(55, 60), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=55 (Op), value='{', start=(55, 61), end=(55, 62), line='    | rulename memoflag? ":" NewLine Indent more_alts Dedent {\n')
Token(type=255 (GrammarAction), value='\n          Rule(rulename[0], rulename[1], more_alts, memo=opt) ', start=(55, 62), end=(56, 62), line='          Rule(rulename[0], rulename[1], more_alts, memo=opt) }\n')
Token(type=55 (Op), value='}', start=(56, 62), end=(56, 63), line='          Rule(rulename[0], rulename[1], more_alts, memo=opt) }\n')
Token(type=4 (NewLine), value='\n', start=(56, 63), end=(56, 64), line='          Rule(rulename[0], rulename[1], more_alts, memo=opt) }\n')
Token(type=55 (Op), value='|', start=(57, 4), end=(57, 5), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=1 (Name), value='rulename', start=(57, 6), end=(57, 14), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=1 (Name), value='memoflag', start=(57, 15), end=(57, 23), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=55 (Op), value='?', start=(57, 23), end=(57, 24), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=3 (String), value='":"', start=(57, 25), end=(57, 28), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=1 (Name), value='alts', start=(57, 29), end=(57, 33), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=1 (Name), value='NewLine', start=(57, 34), end=(57, 41), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=55 (Op), value='{', start=(57, 42), end=(57, 43), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=255 (GrammarAction), value=' Rule(rulename[0], rulename[1], alts, memo=opt) ', start=(57, 43), end=(57, 91), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=55 (Op), value='}', start=(57, 91), end=(57, 92), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=4 (NewLine), value='\n', start=(57, 92), end=(57, 93), line='    | rulename memoflag? ":" alts NewLine { Rule(rulename[0], rulename[1], alts, memo=opt) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(58, 0), end=(58, 1), line='\n')
Token(type=6 (Dedent), value='', start=(59, 0), end=(59, 0), line='rulename[RuleName]:\n')
Token(type=1 (Name), value='rulename', start=(59, 0), end=(59, 8), line='rulename[RuleName]:\n')
Token(type=55 (Op), value='[', start=(59, 8), end=(59, 9), line='rulename[RuleName]:\n')
Token(type=1 (Name), value='RuleName', start=(59, 9), end=(59, 17), line='rulename[RuleName]:\n')
Token(type=55 (Op), value=']', start=(59, 17), end=(59, 18), line='rulename[RuleName]:\n')
Token(type=55 (Op), value=':', start=(59, 18), end=(59, 19), line='rulename[RuleName]:\n')
Token(type=4 (NewLine), value='\n', start=(59, 19), end=(59, 20), line='rulename[RuleName]:\n')
Token(type=5 (Indent), value='    ', start=(60, 0), end=(60, 4), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=55 (Op), value='|', start=(60, 4), end=(60, 5), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=1 (Name), value='Name', start=(60, 6), end=(60, 10), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=1 (Name), value='annotation', start=(60, 11), end=(60, 21), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=55 (Op), value='{', start=(60, 22), end=(60, 23), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=255 (GrammarAction), value=' (name.string, annotation) ', start=(60, 23), end=(60, 50), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=55 (Op), value='}', start=(60, 50), end=(60, 51), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=4 (NewLine), value='\n', start=(60, 51), end=(60, 52), line='    | Name annotation { (name.string, annotation) }\n')
Token(type=55 (Op), value='|', start=(61, 4), end=(61, 5), line='    | Name { (name.string, None) }\n')
Token(type=1 (Name), value='Name', start=(61, 6), end=(61, 10), line='    | Name { (name.string, None) }\n')
Token(type=55 (Op), value='{', start=(61, 11), end=(61, 12), line='    | Name { (name.string, None) }\n')
Token(type=255 (GrammarAction), value=' (name.string, None) ', start=(61, 12), end=(61, 33), line='    | Name { (name.string, None) }\n')
Token(type=55 (Op), value='}', start=(61, 33), end=(61, 34), line='    | Name { (name.string, None) }\n')
Token(type=4 (NewLine), value='\n', start=(61, 34), end=(61, 35), line='    | Name { (name.string, None) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(62, 0), end=(62, 1), line='\n')
Token(type=64 (Comment), value='# In the future this may return something more complicated', start=(63, 0), end=(63, 58), line='# In the future this may return something more complicated\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(63, 58), end=(63, 59), line='# In the future this may return something more complicated\n')
Token(type=6 (Dedent), value='', start=(64, 0), end=(64, 0), line='memoflag[str]:\n')
Token(type=1 (Name), value='memoflag', start=(64, 0), end=(64, 8), line='memoflag[str]:\n')
Token(type=55 (Op), value='[', start=(64, 8), end=(64, 9), line='memoflag[str]:\n')
Token(type=1 (Name), value='str', start=(64, 9), end=(64, 12), line='memoflag[str]:\n')
Token(type=55 (Op), value=']', start=(64, 12), end=(64, 13), line='memoflag[str]:\n')
Token(type=55 (Op), value=':', start=(64, 13), end=(64, 14), line='memoflag[str]:\n')
Token(type=4 (NewLine), value='\n', start=(64, 14), end=(64, 15), line='memoflag[str]:\n')
Token(type=5 (Indent), value='    ', start=(65, 0), end=(65, 4), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=55 (Op), value='|', start=(65, 4), end=(65, 5), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=3 (String), value="'('", start=(65, 6), end=(65, 9), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=3 (String), value='"memo"', start=(65, 10), end=(65, 16), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=3 (String), value="')'", start=(65, 17), end=(65, 20), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=55 (Op), value='{', start=(65, 21), end=(65, 22), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=255 (GrammarAction), value=' "memo" ', start=(65, 22), end=(65, 30), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=55 (Op), value='}', start=(65, 30), end=(65, 31), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=4 (NewLine), value='\n', start=(65, 31), end=(65, 32), line='    | \'(\' "memo" \')\' { "memo" }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(66, 0), end=(66, 1), line='\n')
Token(type=6 (Dedent), value='', start=(67, 0), end=(67, 0), line='alts[Rhs]:\n')
Token(type=1 (Name), value='alts', start=(67, 0), end=(67, 4), line='alts[Rhs]:\n')
Token(type=55 (Op), value='[', start=(67, 4), end=(67, 5), line='alts[Rhs]:\n')
Token(type=1 (Name), value='Rhs', start=(67, 5), end=(67, 8), line='alts[Rhs]:\n')
Token(type=55 (Op), value=']', start=(67, 8), end=(67, 9), line='alts[Rhs]:\n')
Token(type=55 (Op), value=':', start=(67, 9), end=(67, 10), line='alts[Rhs]:\n')
Token(type=4 (NewLine), value='\n', start=(67, 10), end=(67, 11), line='alts[Rhs]:\n')
Token(type=5 (Indent), value='    ', start=(68, 0), end=(68, 4), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=55 (Op), value='|', start=(68, 4), end=(68, 5), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=1 (Name), value='alt', start=(68, 6), end=(68, 9), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=3 (String), value='"|"', start=(68, 10), end=(68, 13), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=1 (Name), value='alts', start=(68, 14), end=(68, 18), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=55 (Op), value='{', start=(68, 19), end=(68, 20), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=255 (GrammarAction), value=' Rhs([alt] + alts.alts)', start=(68, 20), end=(68, 43), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=55 (Op), value='}', start=(68, 43), end=(68, 44), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=4 (NewLine), value='\n', start=(68, 44), end=(68, 45), line='    | alt "|" alts { Rhs([alt] + alts.alts)}\n')
Token(type=55 (Op), value='|', start=(69, 4), end=(69, 5), line='    | alt { Rhs([alt]) }\n')
Token(type=1 (Name), value='alt', start=(69, 6), end=(69, 9), line='    | alt { Rhs([alt]) }\n')
Token(type=55 (Op), value='{', start=(69, 10), end=(69, 11), line='    | alt { Rhs([alt]) }\n')
Token(type=255 (GrammarAction), value=' Rhs([alt]) ', start=(69, 11), end=(69, 23), line='    | alt { Rhs([alt]) }\n')
Token(type=55 (Op), value='}', start=(69, 23), end=(69, 24), line='    | alt { Rhs([alt]) }\n')
Token(type=4 (NewLine), value='\n', start=(69, 24), end=(69, 25), line='    | alt { Rhs([alt]) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(70, 0), end=(70, 1), line='\n')
Token(type=6 (Dedent), value='', start=(71, 0), end=(71, 0), line='more_alts[Rhs]:\n')
Token(type=1 (Name), value='more_alts', start=(71, 0), end=(71, 9), line='more_alts[Rhs]:\n')
Token(type=55 (Op), value='[', start=(71, 9), end=(71, 10), line='more_alts[Rhs]:\n')
Token(type=1 (Name), value='Rhs', start=(71, 10), end=(71, 13), line='more_alts[Rhs]:\n')
Token(type=55 (Op), value=']', start=(71, 13), end=(71, 14), line='more_alts[Rhs]:\n')
Token(type=55 (Op), value=':', start=(71, 14), end=(71, 15), line='more_alts[Rhs]:\n')
Token(type=4 (NewLine), value='\n', start=(71, 15), end=(71, 16), line='more_alts[Rhs]:\n')
Token(type=5 (Indent), value='    ', start=(72, 0), end=(72, 4), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=55 (Op), value='|', start=(72, 4), end=(72, 5), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=3 (String), value='"|"', start=(72, 6), end=(72, 9), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=1 (Name), value='alts', start=(72, 10), end=(72, 14), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=1 (Name), value='NewLine', start=(72, 15), end=(72, 22), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=1 (Name), value='more_alts', start=(72, 23), end=(72, 32), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=55 (Op), value='{', start=(72, 33), end=(72, 34), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=255 (GrammarAction), value=' Rhs(alts.alts + more_alts.alts) ', start=(72, 34), end=(72, 67), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=55 (Op), value='}', start=(72, 67), end=(72, 68), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=4 (NewLine), value='\n', start=(72, 68), end=(72, 69), line='    | "|" alts NewLine more_alts { Rhs(alts.alts + more_alts.alts) }\n')
Token(type=55 (Op), value='|', start=(73, 4), end=(73, 5), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=3 (String), value='"|"', start=(73, 6), end=(73, 9), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=1 (Name), value='alts', start=(73, 10), end=(73, 14), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=1 (Name), value='NewLine', start=(73, 15), end=(73, 22), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=55 (Op), value='{', start=(73, 23), end=(73, 24), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=255 (GrammarAction), value=' Rhs(alts.alts) ', start=(73, 24), end=(73, 40), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=55 (Op), value='}', start=(73, 40), end=(73, 41), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=4 (NewLine), value='\n', start=(73, 41), end=(73, 42), line='    | "|" alts NewLine { Rhs(alts.alts) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(74, 0), end=(74, 1), line='\n')
Token(type=6 (Dedent), value='', start=(75, 0), end=(75, 0), line='alt[Alt]:\n')
Token(type=1 (Name), value='alt', start=(75, 0), end=(75, 3), line='alt[Alt]:\n')
Token(type=55 (Op), value='[', start=(75, 3), end=(75, 4), line='alt[Alt]:\n')
Token(type=1 (Name), value='Alt', start=(75, 4), end=(75, 7), line='alt[Alt]:\n')
Token(type=55 (Op), value=']', start=(75, 7), end=(75, 8), line='alt[Alt]:\n')
Token(type=55 (Op), value=':', start=(75, 8), end=(75, 9), line='alt[Alt]:\n')
Token(type=4 (NewLine), value='\n', start=(75, 9), end=(75, 10), line='alt[Alt]:\n')
Token(type=5 (Indent), value='    ', start=(76, 0), end=(76, 4), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=55 (Op), value='|', start=(76, 4), end=(76, 5), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=1 (Name), value='items', start=(76, 6), end=(76, 11), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=3 (String), value="'$'", start=(76, 12), end=(76, 15), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=1 (Name), value='action', start=(76, 16), end=(76, 22), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=55 (Op), value='{', start=(76, 23), end=(76, 24), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=255 (GrammarAction), value=" Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) ", start=(76, 24), end=(76, 94), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=55 (Op), value='}', start=(76, 94), end=(76, 95), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=4 (NewLine), value='\n', start=(76, 95), end=(76, 96), line="    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=action) }\n")
Token(type=55 (Op), value='|', start=(77, 4), end=(77, 5), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=1 (Name), value='items', start=(77, 6), end=(77, 11), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=3 (String), value="'$'", start=(77, 12), end=(77, 15), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=55 (Op), value='{', start=(77, 16), end=(77, 17), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=255 (GrammarAction), value=" Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) ", start=(77, 17), end=(77, 85), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=55 (Op), value='}', start=(77, 85), end=(77, 86), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=4 (NewLine), value='\n', start=(77, 86), end=(77, 87), line="    | items '$' { Alt(items + [NamedItem(None, NameLeaf('EndMarker'))], action=None) }\n")
Token(type=55 (Op), value='|', start=(78, 4), end=(78, 5), line='    | items action { Alt(items, action=action) }\n')
Token(type=1 (Name), value='items', start=(78, 6), end=(78, 11), line='    | items action { Alt(items, action=action) }\n')
Token(type=1 (Name), value='action', start=(78, 12), end=(78, 18), line='    | items action { Alt(items, action=action) }\n')
Token(type=55 (Op), value='{', start=(78, 19), end=(78, 20), line='    | items action { Alt(items, action=action) }\n')
Token(type=255 (GrammarAction), value=' Alt(items, action=action) ', start=(78, 20), end=(78, 47), line='    | items action { Alt(items, action=action) }\n')
Token(type=55 (Op), value='}', start=(78, 47), end=(78, 48), line='    | items action { Alt(items, action=action) }\n')
Token(type=4 (NewLine), value='\n', start=(78, 48), end=(78, 49), line='    | items action { Alt(items, action=action) }\n')
Token(type=55 (Op), value='|', start=(79, 4), end=(79, 5), line='    | items { Alt(items, action=None) }\n')
Token(type=1 (Name), value='items', start=(79, 6), end=(79, 11), line='    | items { Alt(items, action=None) }\n')
Token(type=55 (Op), value='{', start=(79, 12), end=(79, 13), line='    | items { Alt(items, action=None) }\n')
Token(type=255 (GrammarAction), value=' Alt(items, action=None) ', start=(79, 13), end=(79, 38), line='    | items { Alt(items, action=None) }\n')
Token(type=55 (Op), value='}', start=(79, 38), end=(79, 39), line='    | items { Alt(items, action=None) }\n')
Token(type=4 (NewLine), value='\n', start=(79, 39), end=(79, 40), line='    | items { Alt(items, action=None) }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(80, 0), end=(80, 1), line='\n')
Token(type=6 (Dedent), value='', start=(81, 0), end=(81, 0), line='items[NamedItemList]:\n')
Token(type=1 (Name), value='items', start=(81, 0), end=(81, 5), line='items[NamedItemList]:\n')
Token(type=55 (Op), value='[', start=(81, 5), end=(81, 6), line='items[NamedItemList]:\n')
Token(type=1 (Name), value='NamedItemList', start=(81, 6), end=(81, 19), line='items[NamedItemList]:\n')
Token(type=55 (Op), value=']', start=(81, 19), end=(81, 20), line='items[NamedItemList]:\n')
Token(type=55 (Op), value=':', start=(81, 20), end=(81, 21), line='items[NamedItemList]:\n')
Token(type=4 (NewLine), value='\n', start=(81, 21), end=(81, 22), line='items[NamedItemList]:\n')
Token(type=5 (Indent), value='    ', start=(82, 0), end=(82, 4), line='    | named_item items { [named_item] + items }\n')
Token(type=55 (Op), value='|', start=(82, 4), end=(82, 5), line='    | named_item items { [named_item] + items }\n')
Token(type=1 (Name), value='named_item', start=(82, 6), end=(82, 16), line='    | named_item items { [named_item] + items }\n')
Token(type=1 (Name), value='items', start=(82, 17), end=(82, 22), line='    | named_item items { [named_item] + items }\n')
Token(type=55 (Op), value='{', start=(82, 23), end=(82, 24), line='    | named_item items { [named_item] + items }\n')
Token(type=255 (GrammarAction), value=' [named_item] + items ', start=(82, 24), end=(82, 46), line='    | named_item items { [named_item] + items }\n')
Token(type=55 (Op), value='}', start=(82, 46), end=(82, 47), line='    | named_item items { [named_item] + items }\n')
Token(type=4 (NewLine), value='\n', start=(82, 47), end=(82, 48), line='    | named_item items { [named_item] + items }\n')
Token(type=55 (Op), value='|', start=(83, 4), end=(83, 5), line='    | named_item { [named_item] }\n')
Token(type=1 (Name), value='named_item', start=(83, 6), end=(83, 16), line='    | named_item { [named_item] }\n')
Token(type=55 (Op), value='{', start=(83, 17), end=(83, 18), line='    | named_item { [named_item] }\n')
Token(type=255 (GrammarAction), value=' [named_item] ', start=(83, 18), end=(83, 32), line='    | named_item { [named_item] }\n')
Token(type=55 (Op), value='}', start=(83, 32), end=(83, 33), line='    | named_item { [named_item] }\n')
Token(type=4 (NewLine), value='\n', start=(83, 33), end=(83, 34), line='    | named_item { [named_item] }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(84, 0), end=(84, 1), line='\n')
Token(type=6 (Dedent), value='', start=(85, 0), end=(85, 0), line='named_item[NamedItem]:\n')
Token(type=1 (Name), value='named_item', start=(85, 0), end=(85, 10), line='named_item[NamedItem]:\n')
Token(type=55 (Op), value='[', start=(85, 10), end=(85, 11), line='named_item[NamedItem]:\n')
Token(type=1 (Name), value='NamedItem', start=(85, 11), end=(85, 20), line='named_item[NamedItem]:\n')
Token(type=55 (Op), value=']', start=(85, 20), end=(85, 21), line='named_item[NamedItem]:\n')
Token(type=55 (Op), value=':', start=(85, 21), end=(85, 22), line='named_item[NamedItem]:\n')
Token(type=4 (NewLine), value='\n', start=(85, 22), end=(85, 23), line='named_item[NamedItem]:\n')
Token(type=5 (Indent), value='    ', start=(86, 0), end=(86, 4), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=55 (Op), value='|', start=(86, 4), end=(86, 5), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=1 (Name), value='Name', start=(86, 6), end=(86, 10), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=1 (Name), value='annotation', start=(86, 11), end=(86, 21), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=3 (String), value="'='", start=(86, 22), end=(86, 25), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=55 (Op), value='~', start=(86, 26), end=(86, 27), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=1 (Name), value='item', start=(86, 28), end=(86, 32), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=55 (Op), value='{', start=(86, 33), end=(86, 34), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=255 (GrammarAction), value='NamedItem(name.string, item, annotation)', start=(86, 34), end=(86, 74), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=55 (Op), value='}', start=(86, 74), end=(86, 75), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=4 (NewLine), value='\n', start=(86, 75), end=(86, 76), line="    | Name annotation '=' ~ item {NamedItem(name.string, item, annotation)}\n")
Token(type=55 (Op), value='|', start=(87, 4), end=(87, 5), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=1 (Name), value='Name', start=(87, 6), end=(87, 10), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=3 (String), value="'='", start=(87, 11), end=(87, 14), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=55 (Op), value='~', start=(87, 15), end=(87, 16), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=1 (Name), value='item', start=(87, 17), end=(87, 21), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=55 (Op), value='{', start=(87, 22), end=(87, 23), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=255 (GrammarAction), value='NamedItem(name.string, item)', start=(87, 23), end=(87, 51), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=55 (Op), value='}', start=(87, 51), end=(87, 52), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=4 (NewLine), value='\n', start=(87, 52), end=(87, 53), line="    | Name '=' ~ item {NamedItem(name.string, item)}\n")
Token(type=55 (Op), value='|', start=(88, 4), end=(88, 5), line='    | item {NamedItem(None, item)}\n')
Token(type=1 (Name), value='item', start=(88, 6), end=(88, 10), line='    | item {NamedItem(None, item)}\n')
Token(type=55 (Op), value='{', start=(88, 11), end=(88, 12), line='    | item {NamedItem(None, item)}\n')
Token(type=255 (GrammarAction), value='NamedItem(None, item)', start=(88, 12), end=(88, 33), line='    | item {NamedItem(None, item)}\n')
Token(type=55 (Op), value='}', start=(88, 33), end=(88, 34), line='    | item {NamedItem(None, item)}\n')
Token(type=4 (NewLine), value='\n', start=(88, 34), end=(88, 35), line='    | item {NamedItem(None, item)}\n')
Token(type=55 (Op), value='|', start=(89, 4), end=(89, 5), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=1 (Name), value='forced', start=(89, 6), end=(89, 12), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=55 (Op), value='=', start=(89, 12), end=(89, 13), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=1 (Name), value='forced_atom', start=(89, 13), end=(89, 24), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=55 (Op), value='{', start=(89, 25), end=(89, 26), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=255 (GrammarAction), value='NamedItem(None, forced)', start=(89, 26), end=(89, 49), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=55 (Op), value='}', start=(89, 49), end=(89, 50), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=4 (NewLine), value='\n', start=(89, 50), end=(89, 51), line='    | forced=forced_atom {NamedItem(None, forced)}\n')
Token(type=55 (Op), value='|', start=(90, 4), end=(90, 5), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=1 (Name), value='it', start=(90, 6), end=(90, 8), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=55 (Op), value='=', start=(90, 8), end=(90, 9), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=1 (Name), value='lookahead', start=(90, 9), end=(90, 18), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=55 (Op), value='{', start=(90, 19), end=(90, 20), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=255 (GrammarAction), value='NamedItem(None, it)', start=(90, 20), end=(90, 39), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=55 (Op), value='}', start=(90, 39), end=(90, 40), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=4 (NewLine), value='\n', start=(90, 40), end=(90, 41), line='    | it=lookahead {NamedItem(None, it)}\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(91, 0), end=(91, 1), line='\n')
Token(type=6 (Dedent), value='', start=(92, 0), end=(92, 0), line='forced_atom[Forced]:\n')
Token(type=1 (Name), value='forced_atom', start=(92, 0), end=(92, 11), line='forced_atom[Forced]:\n')
Token(type=55 (Op), value='[', start=(92, 11), end=(92, 12), line='forced_atom[Forced]:\n')
Token(type=1 (Name), value='Forced', start=(92, 12), end=(92, 18), line='forced_atom[Forced]:\n')
Token(type=55 (Op), value=']', start=(92, 18), end=(92, 19), line='forced_atom[Forced]:\n')
Token(type=55 (Op), value=':', start=(92, 19), end=(92, 20), line='forced_atom[Forced]:\n')
Token(type=4 (NewLine), value='\n', start=(92, 20), end=(92, 21), line='forced_atom[Forced]:\n')
Token(type=5 (Indent), value='    ', start=(93, 0), end=(93, 4), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=55 (Op), value='|', start=(93, 4), end=(93, 5), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=3 (String), value="'&'", start=(93, 6), end=(93, 9), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=3 (String), value="'&'", start=(93, 9), end=(93, 12), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=55 (Op), value='~', start=(93, 13), end=(93, 14), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=1 (Name), value='atom', start=(93, 15), end=(93, 19), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=55 (Op), value='{', start=(93, 20), end=(93, 21), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=255 (GrammarAction), value='Forced(atom)', start=(93, 21), end=(93, 33), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=55 (Op), value='}', start=(93, 33), end=(93, 34), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(93, 34), end=(93, 35), line="    | '&''&' ~ atom {Forced(atom)}\n")
Token(type=65 (ContinuedNewLine), value='\n', start=(94, 0), end=(94, 1), line='\n')
Token(type=6 (Dedent), value='', start=(95, 0), end=(95, 0), line='lookahead[LookaheadOrCut]:\n')
Token(type=1 (Name), value='lookahead', start=(95, 0), end=(95, 9), line='lookahead[LookaheadOrCut]:\n')
Token(type=55 (Op), value='[', start=(95, 9), end=(95, 10), line='lookahead[LookaheadOrCut]:\n')
Token(type=1 (Name), value='LookaheadOrCut', start=(95, 10), end=(95, 24), line='lookahead[LookaheadOrCut]:\n')
Token(type=55 (Op), value=']', start=(95, 24), end=(95, 25), line='lookahead[LookaheadOrCut]:\n')
Token(type=55 (Op), value=':', start=(95, 25), end=(95, 26), line='lookahead[LookaheadOrCut]:\n')
Token(type=4 (NewLine), value='\n', start=(95, 26), end=(95, 27), line='lookahead[LookaheadOrCut]:\n')
Token(type=5 (Indent), value='    ', start=(96, 0), end=(96, 4), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=55 (Op), value='|', start=(96, 4), end=(96, 5), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=3 (String), value="'&'", start=(96, 6), end=(96, 9), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=55 (Op), value='~', start=(96, 10), end=(96, 11), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=1 (Name), value='atom', start=(96, 12), end=(96, 16), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=55 (Op), value='{', start=(96, 17), end=(96, 18), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=255 (GrammarAction), value='PositiveLookahead(atom)', start=(96, 18), end=(96, 41), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=55 (Op), value='}', start=(96, 41), end=(96, 42), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(96, 42), end=(96, 43), line="    | '&' ~ atom {PositiveLookahead(atom)}\n")
Token(type=55 (Op), value='|', start=(97, 4), end=(97, 5), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=3 (String), value="'!'", start=(97, 6), end=(97, 9), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=55 (Op), value='~', start=(97, 10), end=(97, 11), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=1 (Name), value='atom', start=(97, 12), end=(97, 16), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=55 (Op), value='{', start=(97, 17), end=(97, 18), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=255 (GrammarAction), value='NegativeLookahead(atom)', start=(97, 18), end=(97, 41), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=55 (Op), value='}', start=(97, 41), end=(97, 42), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(97, 42), end=(97, 43), line="    | '!' ~ atom {NegativeLookahead(atom)}\n")
Token(type=55 (Op), value='|', start=(98, 4), end=(98, 5), line="    | '~' {Cut()}\n")
Token(type=3 (String), value="'~'", start=(98, 6), end=(98, 9), line="    | '~' {Cut()}\n")
Token(type=55 (Op), value='{', start=(98, 10), end=(98, 11), line="    | '~' {Cut()}\n")
Token(type=255 (GrammarAction), value='Cut()', start=(98, 11), end=(98, 16), line="    | '~' {Cut()}\n")
Token(type=55 (Op), value='}', start=(98, 16), end=(98, 17), line="    | '~' {Cut()}\n")
Token(type=4 (NewLine), value='\n', start=(98, 17), end=(98, 18), line="    | '~' {Cut()}\n")
Token(type=65 (ContinuedNewLine), value='\n', start=(99, 0), end=(99, 1), line='\n')
Token(type=6 (Dedent), value='', start=(100, 0), end=(100, 0), line='item[Item]:\n')
Token(type=1 (Name), value='item', start=(100, 0), end=(100, 4), line='item[Item]:\n')
Token(type=55 (Op), value='[', start=(100, 4), end=(100, 5), line='item[Item]:\n')
Token(type=1 (Name), value='Item', start=(100, 5), end=(100, 9), line='item[Item]:\n')
Token(type=55 (Op), value=']', start=(100, 9), end=(100, 10), line='item[Item]:\n')
Token(type=55 (Op), value=':', start=(100, 10), end=(100, 11), line='item[Item]:\n')
Token(type=4 (NewLine), value='\n', start=(100, 11), end=(100, 12), line='item[Item]:\n')
Token(type=5 (Indent), value='    ', start=(101, 0), end=(101, 4), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=55 (Op), value='|', start=(101, 4), end=(101, 5), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=3 (String), value="'['", start=(101, 6), end=(101, 9), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=55 (Op), value='~', start=(101, 10), end=(101, 11), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=1 (Name), value='alts', start=(101, 12), end=(101, 16), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=3 (String), value="']'", start=(101, 17), end=(101, 20), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=55 (Op), value='{', start=(101, 21), end=(101, 22), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=255 (GrammarAction), value='Opt(alts)', start=(101, 22), end=(101, 31), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=55 (Op), value='}', start=(101, 31), end=(101, 32), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=4 (NewLine), value='\n', start=(101, 32), end=(101, 33), line="    | '[' ~ alts ']' {Opt(alts)}\n")
Token(type=55 (Op), value='|', start=(102, 4), end=(102, 5), line="    |  atom '?' {Opt(atom)}\n")
Token(type=1 (Name), value='atom', start=(102, 7), end=(102, 11), line="    |  atom '?' {Opt(atom)}\n")
Token(type=3 (String), value="'?'", start=(102, 12), end=(102, 15), line="    |  atom '?' {Opt(atom)}\n")
Token(type=55 (Op), value='{', start=(102, 16), end=(102, 17), line="    |  atom '?' {Opt(atom)}\n")
Token(type=255 (GrammarAction), value='Opt(atom)', start=(102, 17), end=(102, 26), line="    |  atom '?' {Opt(atom)}\n")
Token(type=55 (Op), value='}', start=(102, 26), end=(102, 27), line="    |  atom '?' {Opt(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(102, 27), end=(102, 28), line="    |  atom '?' {Opt(atom)}\n")
Token(type=55 (Op), value='|', start=(103, 4), end=(103, 5), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=1 (Name), value='atom', start=(103, 7), end=(103, 11), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=3 (String), value="'*'", start=(103, 12), end=(103, 15), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=55 (Op), value='{', start=(103, 16), end=(103, 17), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=255 (GrammarAction), value='Repeat0(atom)', start=(103, 17), end=(103, 30), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=55 (Op), value='}', start=(103, 30), end=(103, 31), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(103, 31), end=(103, 32), line="    |  atom '*' {Repeat0(atom)}\n")
Token(type=55 (Op), value='|', start=(104, 4), end=(104, 5), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=1 (Name), value='atom', start=(104, 7), end=(104, 11), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=3 (String), value="'+'", start=(104, 12), end=(104, 15), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=55 (Op), value='{', start=(104, 16), end=(104, 17), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=255 (GrammarAction), value='Repeat1(atom)', start=(104, 17), end=(104, 30), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=55 (Op), value='}', start=(104, 30), end=(104, 31), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=4 (NewLine), value='\n', start=(104, 31), end=(104, 32), line="    |  atom '+' {Repeat1(atom)}\n")
Token(type=55 (Op), value='|', start=(105, 4), end=(105, 5), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=1 (Name), value='sep', start=(105, 7), end=(105, 10), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=55 (Op), value='=', start=(105, 10), end=(105, 11), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=1 (Name), value='atom', start=(105, 11), end=(105, 15), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=3 (String), value="'.'", start=(105, 16), end=(105, 19), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=1 (Name), value='node', start=(105, 20), end=(105, 24), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=55 (Op), value='=', start=(105, 24), end=(105, 25), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=1 (Name), value='atom', start=(105, 25), end=(105, 29), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=3 (String), value="'+'", start=(105, 30), end=(105, 33), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=55 (Op), value='{', start=(105, 34), end=(105, 35), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=255 (GrammarAction), value='Gather(sep, node)', start=(105, 35), end=(105, 52), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=55 (Op), value='}', start=(105, 52), end=(105, 53), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=4 (NewLine), value='\n', start=(105, 53), end=(105, 54), line="    |  sep=atom '.' node=atom '+' {Gather(sep, node)}\n")
Token(type=55 (Op), value='|', start=(106, 4), end=(106, 5), line='    |  atom {atom}\n')
Token(type=1 (Name), value='atom', start=(106, 7), end=(106, 11), line='    |  atom {atom}\n')
Token(type=55 (Op), value='{', start=(106, 12), end=(106, 13), line='    |  atom {atom}\n')
Token(type=255 (GrammarAction), value='atom', start=(106, 13), end=(106, 17), line='    |  atom {atom}\n')
Token(type=55 (Op), value='}', start=(106, 17), end=(106, 18), line='    |  atom {atom}\n')
Token(type=4 (NewLine), value='\n', start=(106, 18), end=(106, 19), line='    |  atom {atom}\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(107, 0), end=(107, 1), line='\n')
Token(type=6 (Dedent), value='', start=(108, 0), end=(108, 0), line='atom[Plain]:\n')
Token(type=1 (Name), value='atom', start=(108, 0), end=(108, 4), line='atom[Plain]:\n')
Token(type=55 (Op), value='[', start=(108, 4), end=(108, 5), line='atom[Plain]:\n')
Token(type=1 (Name), value='Plain', start=(108, 5), end=(108, 10), line='atom[Plain]:\n')
Token(type=55 (Op), value=']', start=(108, 10), end=(108, 11), line='atom[Plain]:\n')
Token(type=55 (Op), value=':', start=(108, 11), end=(108, 12), line='atom[Plain]:\n')
Token(type=4 (NewLine), value='\n', start=(108, 12), end=(108, 13), line='atom[Plain]:\n')
Token(type=5 (Indent), value='    ', start=(109, 0), end=(109, 4), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=55 (Op), value='|', start=(109, 4), end=(109, 5), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=3 (String), value="'('", start=(109, 6), end=(109, 9), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=55 (Op), value='~', start=(109, 10), end=(109, 11), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=1 (Name), value='alts', start=(109, 12), end=(109, 16), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=3 (String), value="')'", start=(109, 17), end=(109, 20), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=55 (Op), value='{', start=(109, 21), end=(109, 22), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=255 (GrammarAction), value='Group(alts)', start=(109, 22), end=(109, 33), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=55 (Op), value='}', start=(109, 33), end=(109, 34), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=4 (NewLine), value='\n', start=(109, 34), end=(109, 35), line="    | '(' ~ alts ')' {Group(alts)}\n")
Token(type=55 (Op), value='|', start=(110, 4), end=(110, 5), line='    | Name {NameLeaf(name.string) }\n')
Token(type=1 (Name), value='Name', start=(110, 6), end=(110, 10), line='    | Name {NameLeaf(name.string) }\n')
Token(type=55 (Op), value='{', start=(110, 11), end=(110, 12), line='    | Name {NameLeaf(name.string) }\n')
Token(type=255 (GrammarAction), value='NameLeaf(name.string) ', start=(110, 12), end=(110, 34), line='    | Name {NameLeaf(name.string) }\n')
Token(type=55 (Op), value='}', start=(110, 34), end=(110, 35), line='    | Name {NameLeaf(name.string) }\n')
Token(type=4 (NewLine), value='\n', start=(110, 35), end=(110, 36), line='    | Name {NameLeaf(name.string) }\n')
Token(type=55 (Op), value='|', start=(111, 4), end=(111, 5), line='    | String {StringLeaf(string.string)}\n')
Token(type=1 (Name), value='String', start=(111, 6), end=(111, 12), line='    | String {StringLeaf(string.string)}\n')
Token(type=55 (Op), value='{', start=(111, 13), end=(111, 14), line='    | String {StringLeaf(string.string)}\n')
Token(type=255 (GrammarAction), value='StringLeaf(string.string)', start=(111, 14), end=(111, 39), line='    | String {StringLeaf(string.string)}\n')
Token(type=55 (Op), value='}', start=(111, 39), end=(111, 40), line='    | String {StringLeaf(string.string)}\n')
Token(type=4 (NewLine), value='\n', start=(111, 40), end=(111, 41), line='    | String {StringLeaf(string.string)}\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(112, 0), end=(112, 1), line='\n')
Token(type=64 (Comment), value='# Mini-grammar for the actions and annotations', start=(113, 0), end=(113, 46), line='# Mini-grammar for the actions and annotations\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(113, 46), end=(113, 47), line='# Mini-grammar for the actions and annotations\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(114, 0), end=(114, 1), line='\n')
Token(type=6 (Dedent), value='', start=(115, 0), end=(115, 0), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=1 (Name), value='action', start=(115, 0), end=(115, 6), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value='[', start=(115, 6), end=(115, 7), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=1 (Name), value='str', start=(115, 7), end=(115, 10), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value=']', start=(115, 10), end=(115, 11), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value=':', start=(115, 11), end=(115, 12), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=3 (String), value='"{"', start=(115, 13), end=(115, 16), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value='~', start=(115, 17), end=(115, 18), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=1 (Name), value='target_atoms', start=(115, 19), end=(115, 31), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=3 (String), value='"}"', start=(115, 32), end=(115, 35), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value='{', start=(115, 36), end=(115, 37), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=255 (GrammarAction), value=' target_atoms ', start=(115, 37), end=(115, 51), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=55 (Op), value='}', start=(115, 51), end=(115, 52), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=4 (NewLine), value='\n', start=(115, 52), end=(115, 53), line='action[str]: "{" ~ target_atoms "}" { target_atoms }\n')
Token(type=1 (Name), value='annotation', start=(116, 0), end=(116, 10), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value='[', start=(116, 10), end=(116, 11), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=1 (Name), value='str', start=(116, 11), end=(116, 14), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value=']', start=(116, 14), end=(116, 15), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value=':', start=(116, 15), end=(116, 16), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=3 (String), value='"["', start=(116, 17), end=(116, 20), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value='~', start=(116, 21), end=(116, 22), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=1 (Name), value='target_atoms', start=(116, 23), end=(116, 35), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=3 (String), value='"]"', start=(116, 36), end=(116, 39), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value='{', start=(116, 40), end=(116, 41), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=255 (GrammarAction), value=' target_atoms ', start=(116, 41), end=(116, 55), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=55 (Op), value='}', start=(116, 55), end=(116, 56), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=4 (NewLine), value='\n', start=(116, 56), end=(116, 57), line='annotation[str]: "[" ~ target_atoms "]" { target_atoms }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(117, 0), end=(117, 1), line='\n')
Token(type=1 (Name), value='target_atoms', start=(118, 0), end=(118, 12), line='target_atoms[str]:\n')
Token(type=55 (Op), value='[', start=(118, 12), end=(118, 13), line='target_atoms[str]:\n')
Token(type=1 (Name), value='str', start=(118, 13), end=(118, 16), line='target_atoms[str]:\n')
Token(type=55 (Op), value=']', start=(118, 16), end=(118, 17), line='target_atoms[str]:\n')
Token(type=55 (Op), value=':', start=(118, 17), end=(118, 18), line='target_atoms[str]:\n')
Token(type=4 (NewLine), value='\n', start=(118, 18), end=(118, 19), line='target_atoms[str]:\n')
Token(type=5 (Indent), value='    ', start=(119, 0), end=(119, 4), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=55 (Op), value='|', start=(119, 4), end=(119, 5), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=1 (Name), value='target_atom', start=(119, 6), end=(119, 17), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=1 (Name), value='target_atoms', start=(119, 18), end=(119, 30), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=55 (Op), value='{', start=(119, 31), end=(119, 32), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=255 (GrammarAction), value=' target_atom + " " + target_atoms ', start=(119, 32), end=(119, 66), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=55 (Op), value='}', start=(119, 66), end=(119, 67), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=4 (NewLine), value='\n', start=(119, 67), end=(119, 68), line='    | target_atom target_atoms { target_atom + " " + target_atoms }\n')
Token(type=55 (Op), value='|', start=(120, 4), end=(120, 5), line='    | target_atom { target_atom }\n')
Token(type=1 (Name), value='target_atom', start=(120, 6), end=(120, 17), line='    | target_atom { target_atom }\n')
Token(type=55 (Op), value='{', start=(120, 18), end=(120, 19), line='    | target_atom { target_atom }\n')
Token(type=255 (GrammarAction), value=' target_atom ', start=(120, 19), end=(120, 32), line='    | target_atom { target_atom }\n')
Token(type=55 (Op), value='}', start=(120, 32), end=(120, 33), line='    | target_atom { target_atom }\n')
Token(type=4 (NewLine), value='\n', start=(120, 33), end=(120, 34), line='    | target_atom { target_atom }\n')
Token(type=65 (ContinuedNewLine), value='\n', start=(121, 0), end=(121, 1), line='\n')
Token(type=6 (Dedent), value='', start=(122, 0), end=(122, 0), line='target_atom[str]:\n')
Token(type=1 (Name), value='target_atom', start=(122, 0), end=(122, 11), line='target_atom[str]:\n')
Token(type=55 (Op), value='[', start=(122, 11), end=(122, 12), line='target_atom[str]:\n')
Token(type=1 (Name), value='str', start=(122, 12), end=(122, 15), line='target_atom[str]:\n')
Token(type=55 (Op), value=']', start=(122, 15), end=(122, 16), line='target_atom[str]:\n')
Token(type=55 (Op), value=':', start=(122, 16), end=(122, 17), line='target_atom[str]:\n')
Token(type=4 (NewLine), value='\n', start=(122, 17), end=(122, 18), line='target_atom[str]:\n')
Token(type=5 (Indent), value='    ', start=(123, 0), end=(123, 4), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='|', start=(123, 4), end=(123, 5), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=3 (String), value='"{"', start=(123, 6), end=(123, 9), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='~', start=(123, 10), end=(123, 11), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=1 (Name), value='atoms', start=(123, 12), end=(123, 17), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='=', start=(123, 17), end=(123, 18), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=1 (Name), value='target_atoms', start=(123, 18), end=(123, 30), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='?', start=(123, 30), end=(123, 31), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=3 (String), value='"}"', start=(123, 32), end=(123, 35), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='{', start=(123, 36), end=(123, 37), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=255 (GrammarAction), value=' "{" + (atoms or "") + "}" ', start=(123, 37), end=(123, 64), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='}', start=(123, 64), end=(123, 65), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=4 (NewLine), value='\n', start=(123, 65), end=(123, 66), line='    | "{" ~ atoms=target_atoms? "}" { "{" + (atoms or "") + "}" }\n')
Token(type=55 (Op), value='|', start=(124, 4), end=(124, 5), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=3 (String), value='"["', start=(124, 6), end=(124, 9), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='~', start=(124, 10), end=(124, 11), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=1 (Name), value='atoms', start=(124, 12), end=(124, 17), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='=', start=(124, 17), end=(124, 18), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=1 (Name), value='target_atoms', start=(124, 18), end=(124, 30), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='?', start=(124, 30), end=(124, 31), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=3 (String), value='"]"', start=(124, 32), end=(124, 35), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='{', start=(124, 36), end=(124, 37), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=255 (GrammarAction), value=' "[" + (atoms or "") + "]" ', start=(124, 37), end=(124, 64), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='}', start=(124, 64), end=(124, 65), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=4 (NewLine), value='\n', start=(124, 65), end=(124, 66), line='    | "[" ~ atoms=target_atoms? "]" { "[" + (atoms or "") + "]" }\n')
Token(type=55 (Op), value='|', start=(125, 4), end=(125, 5), line='    | Name "*" { name.string + "*" }\n')
Token(type=1 (Name), value='Name', start=(125, 6), end=(125, 10), line='    | Name "*" { name.string + "*" }\n')
Token(type=3 (String), value='"*"', start=(125, 11), end=(125, 14), line='    | Name "*" { name.string + "*" }\n')
Token(type=55 (Op), value='{', start=(125, 15), end=(125, 16), line='    | Name "*" { name.string + "*" }\n')
Token(type=255 (GrammarAction), value=' name.string + "*" ', start=(125, 16), end=(125, 35), line='    | Name "*" { name.string + "*" }\n')
Token(type=55 (Op), value='}', start=(125, 35), end=(125, 36), line='    | Name "*" { name.string + "*" }\n')
Token(type=4 (NewLine), value='\n', start=(125, 36), end=(125, 37), line='    | Name "*" { name.string + "*" }\n')
Token(type=55 (Op), value='|', start=(126, 4), end=(126, 5), line='    | Name { name.string }\n')
Token(type=1 (Name), value='Name', start=(126, 6), end=(126, 10), line='    | Name { name.string }\n')
Token(type=55 (Op), value='{', start=(126, 11), end=(126, 12), line='    | Name { name.string }\n')
Token(type=255 (GrammarAction), value=' name.string ', start=(126, 12), end=(126, 25), line='    | Name { name.string }\n')
Token(type=55 (Op), value='}', start=(126, 25), end=(126, 26), line='    | Name { name.string }\n')
Token(type=4 (NewLine), value='\n', start=(126, 26), end=(126, 27), line='    | Name { name.string }\n')
Token(type=55 (Op), value='|', start=(127, 4), end=(127, 5), line='    | Number { number.string }\n')
Token(type=1 (Name), value='Number', start=(127, 6), end=(127, 12), line='    | Number { number.string }\n')
Token(type=55 (Op), value='{', start=(127, 13), end=(127, 14), line='    | Number { number.string }\n')
Token(type=255 (GrammarAction), value=' number.string ', start=(127, 14), end=(127, 29), line='    | Number { number.string }\n')
Token(type=55 (Op), value='}', start=(127, 29), end=(127, 30), line='    | Number { number.string }\n')
Token(type=4 (NewLine), value='\n', start=(127, 30), end=(127, 31), line='    | Number { number.string }\n')
Token(type=55 (Op), value='|', start=(128, 4), end=(128, 5), line='    | String { string.string }\n')
Token(type=1 (Name), value='String', start=(128, 6), end=(128, 12), line='    | String { string.string }\n')
Token(type=55 (Op), value='{', start=(128, 13), end=(128, 14), line='    | String { string.string }\n')
Token(type=255 (GrammarAction), value=' string.string ', start=(128, 14), end=(128, 29), line='    | String { string.string }\n')
Token(type=55 (Op), value='}', start=(128, 29), end=(128, 30), line='    | String { string.string }\n')
Token(type=4 (NewLine), value='\n', start=(128, 30), end=(128, 31), line='    | String { string.string }\n')
Token(type=55 (Op), value='|', start=(129, 4), end=(129, 5), line='    | "?" { "?" }\n')
Token(type=3 (String), value='"?"', start=(129, 6), end=(129, 9), line='    | "?" { "?" }\n')
Token(type=55 (Op), value='{', start=(129, 10), end=(129, 11), line='    | "?" { "?" }\n')
Token(type=255 (GrammarAction), value=' "?" ', start=(129, 11), end=(129, 16), line='    | "?" { "?" }\n')
Token(type=55 (Op), value='}', start=(129, 16), end=(129, 17), line='    | "?" { "?" }\n')
Token(type=4 (NewLine), value='\n', start=(129, 17), end=(129, 18), line='    | "?" { "?" }\n')
Token(type=55 (Op), value='|', start=(130, 4), end=(130, 5), line='    | ":" { ":" }\n')
Token(type=3 (String), value='":"', start=(130, 6), end=(130, 9), line='    | ":" { ":" }\n')
Token(type=55 (Op), value='{', start=(130, 10), end=(130, 11), line='    | ":" { ":" }\n')
Token(type=255 (GrammarAction), value=' ":" ', start=(130, 11), end=(130, 16), line='    | ":" { ":" }\n')
Token(type=55 (Op), value='}', start=(130, 16), end=(130, 17), line='    | ":" { ":" }\n')
Token(type=4 (NewLine), value='\n', start=(130, 17), end=(130, 18), line='    | ":" { ":" }\n')
Token(type=55 (Op), value='|', start=(131, 4), end=(131, 5), line='    | !"}" !"]" Op { op.string }\n')
Token(type=55 (Op), value='!', start=(131, 6), end=(131, 7), line='    | !"}" !"]" Op { op.string }\n')
Token(type=3 (String), value='"}"', start=(131, 7), end=(131, 10), line='    | !"}" !"]" Op { op.string }\n')
Token(type=55 (Op), value='!', start=(131, 11), end=(131, 12), line='    | !"}" !"]" Op { op.string }\n')
Token(type=3 (String), value='"]"', start=(131, 12), end=(131, 15), line='    | !"}" !"]" Op { op.string }\n')
Token(type=1 (Name), value='Op', start=(131, 16), end=(131, 18), line='    | !"}" !"]" Op { op.string }\n')
Token(type=55 (Op), value='{', start=(131, 19), end=(131, 20), line='    | !"}" !"]" Op { op.string }\n')
Token(type=255 (GrammarAction), value=' op.string ', start=(131, 20), end=(131, 31), line='    | !"}" !"]" Op { op.string }\n')
Token(type=55 (Op), value='}', start=(131, 31), end=(131, 32), line='    | !"}" !"]" Op { op.string }\n')
Token(type=4 (NewLine), value='\n', start=(131, 32), end=(131, 33), line='    | !"}" !"]" Op { op.string }\n')
Token(type=6 (Dedent), value='', start=(132, 0), end=(132, 0), line='')
Token(type=0 (EndMarker), value='', start=(132, 0), end=(132, 0), line='')
